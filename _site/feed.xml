<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端花园</title>
    <description>在前端的道路上风景更加绚丽多姿</description>
    <link>https://github.com/BETH-zhang/</link>
    <atom:link href="https://github.com/BETH-zhang/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jul 2016 00:18:52 +0800</pubDate>
    <lastBuildDate>Wed, 06 Jul 2016 00:18:52 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Kityminder整体设计</title>
        <description>&lt;h1 id=&quot;kity-minder-&quot;&gt;Kity Minder 整体设计&lt;/h1&gt;

&lt;h2 id=&quot;namespace-kityminder&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt; KityMinder&lt;/h2&gt;
&lt;p&gt;暴露的命名空间，所有公开类都会放在该命名空间下。还会暴露一个简写的命名空间：KM。&lt;/p&gt;

&lt;h2 id=&quot;abstract-command&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abstract&lt;/code&gt; Command&lt;/h2&gt;

&lt;p&gt;表示一条在 KityMinder 上执行的命令，以class的方式定义，命令必须依附于模块，不允许单独存在。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;命令定义结构：&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Minder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...]){},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;revert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Minder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 基类缺省实现：&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;queryState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Minder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;queryValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Minder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){},&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 基类实现：&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setContentChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;isContentChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;setSelectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;isSelectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;method-executeminder-minder-args-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; execute(Minder minder [,args…] )&lt;/h3&gt;
&lt;p&gt;定义command执行时的一些操作，不可缺省&lt;/p&gt;

&lt;h3 id=&quot;method-revertminder-minder&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; revert(Minder minder)&lt;/h3&gt;
&lt;p&gt;定义revert操作，可缺省,如果没有则为不可revert&lt;/p&gt;

&lt;h3 id=&quot;method-querystateminder-minder&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; queryState(Minder minder)&lt;/h3&gt;
&lt;p&gt;todo:用于返回当前命令的state，分为&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-1：不可执行&lt;/li&gt;
  &lt;li&gt;0：可执行&lt;/li&gt;
  &lt;li&gt;1：已执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可缺省，默认返回0&lt;/p&gt;

&lt;h3 id=&quot;method-queryvalueminder-minder&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; queryValue(Minder minder)&lt;/h3&gt;
&lt;p&gt;todo:用于返回当前命令的状态相关值，（例如：进度条的进度百分比值等）
可缺省&lt;/p&gt;

&lt;h3 id=&quot;method-iscontentchanged&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; isContentChanged()&lt;/h3&gt;
&lt;p&gt;返回命令是否对内容产生影响（true/false）
缺省为 true&lt;/p&gt;

&lt;h3 id=&quot;method-iscontentchanged-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; isContentChanged()&lt;/h3&gt;
&lt;p&gt;返回命令是否对选区产生影响（true/false）
缺省为 false&lt;/p&gt;

&lt;h2 id=&quot;module&quot;&gt;Module&lt;/h2&gt;
&lt;p&gt;Module定义一个模块，表示控制脑图中一个功能的模块（布局、渲染、输入文字、图标叠加等）&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模块定义&lt;/h3&gt;
&lt;p&gt;下面代码简单展示了模块的定义方式&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;KityMinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ModuleName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 此处可以进行命令的定义、设置模块常量、工具函数等&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 模块可能使用到的配置项，提供一个默认值&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;defaultOpitons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Minder 实例化的时候会调用 init 方法，this 指向正在实例化的 Minder 对象&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// options 是 Minder 对象最终的配置（经过配置文件和用户设定改写）&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 注册模块需要使用到的命令&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;mycommand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CommandClass&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 模块需要关注的事件处理函数&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 处理函数中 this 指向事件发生的 Minder 对象&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// e 参数为 MinderEvent 对象&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;events&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;keydown keyup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Minder 被卸载的时候会调用 destroy 方法，模块自行回收自己的资源（事件由 Minder 自动回收）&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// destroy 方法中的 this 指向 Minder 实例&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;destroy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Minder 被重设是会调用 reset 方法，模块自行&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// reset 方法中的 this 指向 Minder 实例&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;reset&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mindernode&quot;&gt;MinderNode&lt;/h2&gt;

&lt;p&gt;MinderNode 是 Kity Minder 需要展示和控制的树的一个节点。节点上提供了&lt;em&gt;树遍历&lt;/em&gt;和&lt;em&gt;数据存取&lt;/em&gt;的功能。并且提供对节点对应的渲染容器（Kity.Group）的访问&lt;/p&gt;

&lt;p&gt;节点上提供公开字段，任何模块可以读取和修改，这些字段会提供给 KityMinder 作为渲染的依据。&lt;/p&gt;

&lt;p&gt;公开的字段和存放的数据都会在导出、保存现场的时候被保留。&lt;/p&gt;

&lt;p&gt;MinderTreeNode 维护的树关系和数据只是作为一个脑图的结构和数据，不具有任何渲染和交互的能力。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;树遍历&lt;/h3&gt;

&lt;p&gt;通过 6 个接口来进行树的访问和修改操作&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getParent()&lt;/code&gt; 返回当前节点的父节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getChildren()&lt;/code&gt; 返回当前节点的子节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getIndex()&lt;/code&gt; 返回当前节点在父节点中的位置，如果没有父节点，返回 -1&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.insertChild( node, index )&lt;/code&gt; 插入一个子节点到当前节点上，插入的位置为 index&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.removeChild( node | index )&lt;/code&gt; 移除一个子节点或指定位置的子节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getChild( index )&lt;/code&gt; 获得指定位置的子节点&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;数据存取&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getData(name)&lt;/code&gt; 获得指定字段的数据&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.setData(name, value)&lt;/code&gt; 设定指定字段的数据&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;公开字段&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.setData( &quot;x&quot;, value )&lt;/code&gt; 设置节点的 x 坐标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.setData( &quot;y&quot;, value )&lt;/code&gt; 设置节点的 y 坐标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getData( &quot;x&quot;, value )&lt;/code&gt; 获取节点的 x 坐标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getData( &quot;y&quot;, value )&lt;/code&gt; 获取节点的 y 坐标&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.setData( &quot;text&quot;, value )&lt;/code&gt; 设置节点的文本&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getData( &quot;text&quot;, value )&lt;/code&gt; 获取节点的文本&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;渲染容器&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node.getRenderContainer()&lt;/code&gt; 返回当前节点的渲染容器&lt;/p&gt;

&lt;h2 id=&quot;minder&quot;&gt;Minder&lt;/h2&gt;

&lt;p&gt;脑图使用类&lt;/p&gt;

&lt;h3 id=&quot;static-method-registermodule-name-module-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static method&lt;/code&gt; registerModule( name, module )&lt;/h3&gt;
&lt;p&gt;注册一个模块&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;构造函数&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; KityMinder(id, option)&lt;/p&gt;

&lt;p&gt;创建脑图画布。KityMinder 实例化的时候，会从模块池中取出模块，并且实例化这些模块，然后加载。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 实例的 id&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt; 其他选项（当前没有）&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;公开接口&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.getRoot() : MinderNode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;获取脑图根节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.execCommand( name [, params...] ) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行指定的命令。该方法执行的时候，会实例化指定类型的命令，并且把命令参数传给命令执行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.queryCommandState( name )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查询命令的当前状态&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.queryCommandValue( name )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查询命令的当前结果&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.update(MinderNode node) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;更新指定节点及其子树的呈现，如果不指定节点，则更新跟节点的呈现（整棵树）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.export() : object&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以导出节点以及所有子树的数据（data上所有的字段会被导出）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.import(object data) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;导入节点数据，会节点以及所有子树结构以及子树数据&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.getSelectedNodes() : MinderNode[]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回选中的节点列表&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.select(MinderNode[] nodes | MinderNode node) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加一个或多个节点到节点选择列表中&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.selectSingle(Minder node) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;唯一选中指定节点&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.toggleSelect(MinderNode[] nodes | MinderNode node)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;切换一个或多个节点的选中状态&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.clearSelect(MinderNode[] nodes | MinderNode node) : this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;从节点选择列表中移除一个或多个节点，如果不传节点，全部取消选择&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;事件机制&lt;/h3&gt;

&lt;h4 id=&quot;section-9&quot;&gt;事件分类&lt;/h4&gt;

&lt;p&gt;KityMinder 的事件分为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;交互事件: &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dblclick&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mousedown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mousemove&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;keydown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;keyup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;touchstart&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;touchend&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;touchmove&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Command 事件: &lt;code class=&quot;highlighter-rouge&quot;&gt;beforecommand&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;precommand&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aftercommand&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;交互事件：&lt;code class=&quot;highlighter-rouge&quot;&gt;selectionchange&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;contentchange&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;interactchange&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模块事件：模块自行触发与上述不同名的事件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-10&quot;&gt;事件接口&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.on(event, callback)&lt;/code&gt; 侦听指定事件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.once(event, callback)&lt;/code&gt; 侦听指定事件一次，当 callback 被调用之后，后面再发生该事件不再被调用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.off(event, callback)&lt;/code&gt; 取消对事件的侦听&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.fire(event, params)&lt;/code&gt; 触发指定的事件，params 是自定义的 JSON 数据，会合并到事件对象&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;回调函数接口&lt;/h4&gt;

&lt;p&gt;回调函数接收唯一的参数 e&lt;/p&gt;

&lt;p&gt;对于交互事件，e 是原生 event 对象的一个拓展；对于需要坐标的事件，用 e.getPosition() 可以获得在 Kity Paper 上的坐标值&lt;/p&gt;

&lt;p&gt;对 command 事件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.commandName&lt;/code&gt; 获取执行的命令的类型&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.commandArgs&lt;/code&gt; 获取命令执行的参数列表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对 import 事件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.getImportData()&lt;/code&gt; 获取导入的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对 selectionchange 事件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.currentSelection&lt;/code&gt; 获取当前选择的节点列表&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.additionNodes&lt;/code&gt; 添加到选择节点列表的那部分节点&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e.removalNodes&lt;/code&gt; 从选择节点列表移除的那部分节点&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-12&quot;&gt;事件触发时机&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt; 事件只在顶级 command 执行的时候触发（Command 里调用 Command 不触发）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentchange&lt;/code&gt; 事件在顶级 command 之后会查询是否发生了内容的变化，如果发生了变化，则会触发；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;selectionchange&lt;/code&gt; 事件在顶级 command 之后会查询是否发生了选区的变化，如果发生了变化，则会触发&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;interactchange&lt;/code&gt; 事件会在所有的鼠标、键盘、触摸操作后发生，并且会进行稀释；command 可以手动触发该事件，此时不会被稀释&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/05/kityminder%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/05/kityminder%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1.html</guid>
        
        
      </item>
    
      <item>
        <title>Kityminder Core Command</title>
        <description>&lt;p&gt;移步：&lt;a href=&quot;https://github.com/fex-team/kityminder-core/wiki/command#appendchildnode&quot;&gt;命令（Command）和 API 的差别&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;命令列表&lt;/h1&gt;

&lt;div id=&quot;kityMinderCommand&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/H5ComponentBase.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/is.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/mini_markdown.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/H5ComponentkityMinderCommand.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    var data = {
        AppendChildNode: {
            intro: &quot;添加子节点到选中的节点中&quot;,
            command: &quot;minder.execCommand(&#39;AppendChildNode&#39;, textOrData);&quot;,
            params: [{
                param: &#39;textOrData&#39;,
                type: &#39;string|object&#39;,
                intro: &#39;要插入的节点的文本或数据&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;AppendChildNode&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        AppendSiblingNode: {
            intro: &quot;添加选中的节点的兄弟节点&quot;,
            command: &quot;minder.execCommand(&#39;AppendSiblingNode&#39;, textOrData);&quot;,
            params: [{
                param: &#39;textOrData&#39;,
                type: &#39;string|object&#39;,
                intro: &#39;要添加的节点的文本或数据&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;AppendSiblingNode&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        Arrange: {
            intro: &quot;调整选中节点的位置&quot;,
            command: &quot;minder.execCommand(&#39;Arrange&#39;, index);&quot;,
            params: [{
                param: &#39;index&#39;,
                type: &#39;number&#39;,
                intro: &#39;调整后节点的新位置&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Arrange&#39;);&quot;,
                value: {
                    0: &#39;当前选中了具有相同父亲的节点&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        },
        ArrangeDown: {
            intro: &quot;向下调整选中节点的位置&quot;,
            keyCode: &#39;Alt + Down&#39;,
            command: &quot;minder.execCommand(&#39;ArrangeDown&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ArrangeDown&#39;);&quot;,
                value: {
                    0: &#39;当前选中了具有相同父亲的节点&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        },
        ArrangeUp: {
            intro: &quot;向上调整选中节点的位置&quot;,
            keyCode: &#39;Alt + Up&#39;,
            command: &quot;minder.execCommand(&#39;ArrangeUp&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ArrangeUp&#39;);&quot;,
                value: {
                    0: &#39;当前选中了具有相同父亲的节点&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        },
        Background: {
            intro: &quot;设置选中节点的背景颜色&quot;,
            command: &quot;minder.execCommand(&#39;Background&#39;, color);&quot;,
            params: [{
                param: &#39;color&#39;,
                type: &#39;string&#39;,
                intro: &#39;表示颜色的字符串&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Background&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Background&#39;);&quot;,
            tips: &quot;如果只有一个节点选中，返回已选中节点的背景颜色；否则返回 &#39;mixed&#39;&quot;
        },
        Bold: {
            intro: &quot;加粗选中的节点&quot;,
            keyCode: &#39;Ctrl + B&#39;,
            command: &quot;minder.execCommand(&#39;Bold&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Bold&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;,
                    1: &#39;当前已选中的节点已加粗&#39;
                }
            }
        },
        Camera: {
            intro: &quot;设置当前视野的中心位置到某个节点上&quot;,
            command: &quot;minder.execCommand(&#39;Camera&#39;, focusNode, duration);&quot;,
            params: [{
                param: &#39;focusNode&#39;,
                type: &#39;kityminder.MinderNode&#39;,
                intro: &#39;要定位的节点&#39;
            },{
                param: &#39;duration&#39;,
                type: &#39;number&#39;,
                intro: &#39;设置视野移动的动画时长（单位 ms），设置为 0 不使用动画&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Camera&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;,
                }
            }
        },
        ClearStyle: {
            intro: &quot;移除选中节点的样式，包括字体、字号、粗体、斜体、背景色、字体色&quot;,
            command: &quot;minder.execCommand(&#39;ClearStyle&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ClearStyle&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点，并且至少有一个设置了至少一种样式&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        },
        Copy: {
            intro: &quot;复制当前选中的节点&quot;,
            keyCode: &#39;Ctrl + C&#39;,
            command: &quot;minder.execCommand(&#39;Copy&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Copy&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        CopyStyle: {
            intro: &quot;拷贝选中节点的当前样式，包括字体、字号、粗体、斜体、背景色、字体色&quot;,
            command: &quot;minder.execCommand(&#39;CopyStyle&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;CopyStyle&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        Cut: {
            intro: &quot;剪切当前选中的节点&quot;,
            keyCode: &#39;Ctrl + X&#39;,
            command: &quot;minder.execCommand(&#39;Cut&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Cut&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        EditNode: {
            intro: &quot;编辑选中的节点&quot;,
            command: &quot;minder.execCommand(&#39;EditNode&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;EditNode&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        Expand: {
            intro: &quot;展开当前选中的节点，保证其可见&quot;,
            command: &quot;minder.execCommand(&#39;Expand&#39;, justParents);&quot;,
            params: [{
                param: &#39;justParents&#39;,
                type: &#39;bool&#39;,
                intro: &#39;是否只展开到父亲&lt;br/&gt;* false - （默认）保证选中的节点以及其子树可见&lt;br/&gt;* true - 只保证选中的节点可见，不展开其子树&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Expand&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        ExpandToLevel: {
            intro: &quot;展开脑图到指定的层级&quot;,
            command: &quot;minder.execCommand(&#39;ExpandToLevel&#39;, level);&quot;,
            params: [{
                param: &#39;level&#39;,
                type: &#39;number&#39;,
                intro: &#39;指定展开到的层级，最少值为 1。&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ExpandToLevel&#39;);&quot;,
                value: {
                    0: &#39;一直可用&#39;
                }
            }
        },
        FontFamily: {
            intro: &quot;设置选中节点的字体&quot;,
            command: &quot;minder.execCommand(&#39;FontFamily&#39;, family);&quot;,
            params: [{
                param: &#39;family&#39;,
                type: &#39;string&#39;,
                intro: &#39;表示字体的字符串&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;FontFamily&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;FontFamily&#39;);&quot;,
            tips: &#39;返回首个选中节点的字体&#39;
        },
        FontSize: {
            intro: &quot;设置选中节点的字体大小&quot;,
            command: &quot;minder.execCommand(&#39;FontSize&#39;, size);&quot;,
            params: [{
                param: &#39;size&#39;,
                type: &#39;number&#39;,
                intro: &#39;字体大小（px）&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;FontSize&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;FontSize&#39;);&quot;,
            tips: &#39;返回首个选中节点的字体大小&#39;
        },
        ForeColor: {
            intro: &quot;设置选中节点的字体颜色&quot;,
            command: &quot;minder.execCommand(&#39;ForeColor&#39;, color);&quot;,
            params: [{
                param: &#39;color&#39;,
                type: &#39;string&#39;,
                intro: &#39;表示颜色的字符串&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ForeColor&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;ForeColor&#39;);&quot;,
            tips: &quot;如果只有一个节点选中，返回已选中节点的字体颜色；否则返回 &#39;mixed&#39;。&quot;
        },
        Hand: {
            intro: &quot;切换抓手状态，抓手状态下，鼠标拖动将拖动视野，而不是创建选区&quot;,
            command: &quot;minder.execCommand(&#39;Hand&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Hand&#39;);&quot;,
                value: {
                    0: &#39;当前不是抓手状态&#39;,
                    1: &#39;当前是抓手状态&#39;
                }
            }
        },
        HyperLink: {
            intro: &quot;为选中的节点添加超链接&quot;,
            command: &quot;minder.execCommand(&#39;HyperLink&#39;, url, title);&quot;,
            params: [{
                param: &#39;url&#39;,
                type: &#39;string&#39;,
                intro: &#39;超链接的 URL，设置为 null 移除&#39;
            },{
                param: &#39;title&#39;,
                type: &#39;string&#39;,
                intro: &#39;超链接的说明&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;HyperLink&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;HyperLink&#39;);&quot;,
            tips: &quot;返回首个选中节点的超链接信息，JSON 对象： {url: url, title: title}&quot;
        },
        Image: {
            intro: &quot;为选中的节点添加图片&quot;,
            command: &quot;minder.execCommand(&#39;Image&#39;, url, title);&quot;,
            params: [{
                param: &#39;url&#39;,
                type: &#39;string&#39;,
                intro: &quot;图片的 URL，设置为空字符串 &#39;&#39; 为移除图片&quot;
            },{
                param: &#39;title&#39;,
                type: &#39;string&#39;,
                intro: &#39;图片的说明&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Image&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Image&#39;);&quot;,
            tips: &quot;返回首个选中节点的图片信息，JSON 对象： {url: url, title: title}&quot;
        },
        Italic: {
            intro: &quot;加斜选中的节点&quot;,
            keyCode: &#39;Ctrl + I&#39;,
            command: &quot;minder.execCommand(&#39;Italic&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Italic&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;,
                    1: &#39;当前已选中的节点已加斜&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Image&#39;);&quot;,
            tips: &quot;返回首个选中节点的图片信息，JSON 对象： {url: url, title: title}&quot;
        },
        Layout: {
            intro: &quot;设置选中节点的布局&lt;br&gt;允许使用的布局可以使用 kityminder.Minder.getLayoutList() &quot;,
            command: &quot;minder.execCommand(&#39;Layout&#39;, name);&quot;,
            params: [{
                param: &#39;name&#39;,
                type: &#39;string&#39;,
                intro: &#39;布局的名称，设置为 null 则使用继承或默认的布局&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Layout&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Layout&#39;);&quot;,
            tips: &quot;返回首个选中节点的布局名称&quot;
        },
        Move: {
            intro: &quot;指定方向移动当前视野&quot;,
            command: &quot;minder.execCommand(&#39;Move&#39;, dir, duration);&quot;,
            params: [{
                param: &#39;dir&#39;,
                type: &#39;string&#39;,
                intro: &quot;移动方向&lt;br/&gt;取值为 &#39;left&#39;，视野向左移动一半&lt;br/&gt;取值为 &#39;right&#39;，视野向右移动一半&lt;/br&gt;取值为 &#39;up&#39;，视野向上移动一半&lt;/br&gt;取值为 &#39;down&#39;，视野向下移动一半&quot;
            },{
                param: &#39;duration&#39;,
                type: &#39;number&#39;,
                intro: &#39;视野移动的动画时长（单位 ms），设置为 0 不使用动画&#39;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Move&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;
                }
            }
        },
        Note: {
            intro: &quot;设置节点的备注信息&quot;,
            command: &quot;minder.execCommand(&#39;Note&#39;, note);&quot;,
            params: [{
                param: &#39;note&#39;,
                type: &#39;string&#39;,
                intro: &quot;要设置的备注信息，设置为 null 则移除备注信息&quot;
            }],            
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Note&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        Paste: {
            intro: &quot;粘贴已复制的节点到每一个当前选中的节点上&quot;,
            keyCode: &#39;Ctrl + V&#39;,
            command: &quot;minder.execCommand(&#39;Paste&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Paste&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        PasteStyle: {
            intro: &quot;粘贴已拷贝的样式到选中的节点上，包括字体、字号、粗体、斜体、背景色、字体色&quot;,
            command: &quot;minder.execCommand(&#39;PasteStyle&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;PasteStyle&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点, 并且已经有复制的样式&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点, 或者没有复制的样式&#39;
                }
            }
        },
        Priority: {
            intro: &quot;设置节点的优先级信息&quot;,
            command: &quot;minder.execCommand(&#39;Priority&#39;, value);&quot;,
            params: [{
                param: &#39;value&#39;,
                type: &#39;number&#39;,
                intro: &#39;要设置的优先级（添加一个优先级小图标）&lt;br/&gt;取值为 0 移除优先级信息；&lt;br/&gt;取值为 1 - 9 设置优先级，超过 9 的优先级不渲染&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Priority&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        Progress: {
            intro: &quot;设置节点的进度信息（添加一个进度小图标）&quot;,
            command: &quot;minder.execCommand(&#39;Progress&#39;, value);&quot;,
            params: [{
                param: &#39;value&#39;,
                type: &#39;number&#39;,
                intro: &#39;要设置的进度&lt;br/&gt;取值为 0 移除进度信息；&lt;/br&gt;取值为 1 表示未开始；&lt;br/&gt;取值为 2 表示完成 1/8；&lt;br/&gt;取值为 3 表示完成 2/8；&lt;br/&gt;取值为 4 表示完成 3/8；&lt;br/&gt;其余类推，取值为 9 表示全部完成&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Progress&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        RemoveNode: {
            intro: &quot;移除选中的节点&quot;,
            command: &quot;minder.execCommand(&#39;RemoveNode&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;RemoveNode&#39;);&quot;,
                value: {
                    0: &#39;当前有选中的节点&#39;,
                    &#39;-1&#39;: &#39;当前没有选中的节点&#39;
                }
            }
        },
        ResetLayout: {
            intro: &quot;重设选中节点的布局，如果当前没有选中的节点，重设整个脑图的布局&quot;,
            command: &quot;minder.execCommand(&#39;ResetLayout&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ResetLayout&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;ResetLayout&#39;);&quot;,
            tips: &#39;返回首个选中节点的布局名称&#39;
        },
        Resource: {
            intro: &quot;设置节点的资源标签&quot;,
            command: &quot;minder.execCommand(&#39;Resource&#39;, resource);&quot;,
            params: [{
                param: &#39;resource&#39;,
                type: &#39;Array&lt;string&gt;&#39;,
                intro: &#39;要设置的资源列表，设置为空清除节点的资源标签&#39;
            }],
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Resource&#39;);&quot;,
            tips: &#39;返回当前选中节点中包含的资源（数组）&#39;
        },
        Template: {
            intro: &quot;设置当前脑图的模板&quot;,
            command: &quot;minder.execCommand(&#39;Template&#39;, name);&quot;,
            params: [{
                param: &#39;name&#39;,
                type: &#39;string&#39;,
                intro: &#39;模板名称&lt;br/&gt;允许使用的模板可以使用 kityminder.Minder.getTemplateList() 查询&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Template&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Template&#39;);&quot;,
            tips: &#39;返回当前的模板名称&#39;
        },
        Theme: {
            intro: &quot;设置当前脑图的主题&quot;,
            command: &quot;minder.execCommand(&#39;Theme&#39;, name);&quot;,
            params: [{
                param: &#39;name&#39;,
                type: &#39;string&#39;,
                intro: &#39;主题名称&lt;br/&gt;允许使用的主题可以使用 kityminder.Minder.getThemeList() 查询&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Theme&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;
                }
            },
            returnValue: &quot;var value = minder.queryCommandValue(&#39;Theme&#39;);&quot;,
            tips: &#39;返回当前的主题名称&#39;
        },
        Zoom: {
            intro: &quot;缩放当前的视野到一定的比例（百分比）&quot;,
            command: &quot;minder.execCommand(&#39;Zoom&#39;, value);&quot;,
            params: [{
                param: &#39;value&#39;,
                type: &#39;number&#39;,
                intro: &#39;设置的比例，取值 100 则为原尺寸&#39;
            }],
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;Zoom&#39;);&quot;,
                value: {
                    0: &#39;始终可用&#39;
                }
            }
        },
        ZoomIn: {
            intro: &quot;放大当前的视野到下一个比例等级（百分比）&quot;,
            keyCode: &#39;=&#39;,
            command: &quot;minder.execCommand(&#39;ZoomIn&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ZoomIn&#39;);&quot;,
                value: {
                    0: &#39;如果当前脑图的配置中还有下一个比例等级&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        },
        ZoomOut: {
            intro: &quot;缩小当前的视野到上一个比例等级（百分比）&quot;,
            keyCode: &#39;-&#39;,
            command: &quot;minder.execCommand(&#39;ZoomOut&#39;);&quot;,
            state: {
                get: &quot;var state = minder.queryCommandState(&#39;ZoomOut&#39;);&quot;,
                value: {
                    0: &#39;如果当前脑图的配置中还有上一个比例等级&#39;,
                    &#39;-1&#39;: &#39;其它情况&#39;
                }
            }
        }
    };
    var kityMinderCommand = new H5ComponentkityMinderCommand(&#39;my&#39;, {
        type: &#39;kityMinderCommand&#39;,
        data: data
    });

    $(&#39;#kityMinderCommand&#39;).append(kityMinderCommand);
&lt;/script&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/05/kityminder-core-command.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/05/kityminder-core-command.html</guid>
        
        
      </item>
    
      <item>
        <title>Js数据类型判断</title>
        <description>&lt;p&gt;http://www.cnblogs.com/mofish/p/3388427.html&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/05/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/05/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html</guid>
        
        
      </item>
    
      <item>
        <title>前端资源大汇总</title>
        <description>&lt;p&gt;http://cnodejs.org/topic/56ef3edd532839c33a99d00e&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;综合类&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;前端知识体系&lt;/h2&gt;
&lt;p&gt;## 前端知识结构
## Web前端开发大系概览
## Web前端开发大系概览-中文版
## Web Front-end Stack v2.2
## 免费的编程中文书籍索引
## 前端书籍
## 前端免费书籍大全
## 前端知识体系
## 免费的编程中文书籍索引
## 智能社 - 精通JavaScript开发
## 重新介绍 JavaScript（JS 教程）
## 麻省理工学院公开课：计算机科学及编程导论
## JavaScript中的this陷阱的最全收集–没有之一
## JS函数式编程指南
## JavaScript Promise迷你书（中文版）
## 腾讯移动Web前端知识库
## Front-End-Develop-Guide 前端开发指南
## 前端开发笔记本
## 大前端工具集 - 聂微东
## 前端开发者手册&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;入门类&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;前端入门教程&lt;/h2&gt;
&lt;p&gt;## 瘳雪峰的Javascript教程
## jQuery基础教程
## 前端工程师必备的PS技能——切图篇
## 结合个人经历总结的前端入门方法&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;效果类&lt;/h1&gt;

&lt;h2 id=&quot;section-5&quot;&gt;弹出层&lt;/h2&gt;
&lt;p&gt;## 焦点图轮播特效&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;工具类&lt;/h1&gt;

&lt;h2 id=&quot;css-sprite-&quot;&gt;css sprite 雪碧图制作&lt;/h2&gt;
&lt;p&gt;## 版本控制入门 – 搬进 Github
## Grunt-beginner前端自动化工具&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;慕课专题&lt;/h1&gt;

&lt;h2 id=&quot;section-8&quot;&gt;张鑫旭 - 慕课系列&lt;/h2&gt;
&lt;p&gt;## lyn - 慕课系列
## 艾伦 - 慕课系列
## 碧仔 - Hello，移动WEB&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;周报类&lt;/h1&gt;

&lt;h2 id=&quot;section-10&quot;&gt;平安科技移动开发二队技术周报&lt;/h2&gt;

&lt;h1 id=&quot;section-11&quot;&gt;开发中心&lt;/h1&gt;

&lt;h2 id=&quot;mozilla-js&quot;&gt;mozilla js参考&lt;/h2&gt;
&lt;p&gt;## chrome开发中心（chrome的内核已转向blink）
## safari开发中心
## microsoft js参考
## js秘密花园
## js秘密花园
## w3help 综合Bug集合网站&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;综合搜索&lt;/h1&gt;

&lt;h2 id=&quot;javascripting&quot;&gt;javascripting&lt;/h2&gt;
&lt;p&gt;## 各种流行库搜索&lt;/p&gt;

&lt;h1 id=&quot;api&quot;&gt;综合API&lt;/h1&gt;

&lt;h2 id=&quot;runoobcom-api&quot;&gt;runoob.com-包含各种API集合&lt;/h2&gt;
&lt;p&gt;## 开源中国在线API文档合集
## devdocs 英文综合API网站&lt;/p&gt;

&lt;h1 id=&quot;jquery&quot;&gt;jQuery&lt;/h1&gt;

&lt;h2 id=&quot;jquery-api-&quot;&gt;jQuery API 中文文档&lt;/h2&gt;
&lt;p&gt;## hemin 在线版
## css88 jq api
## css88 jqui api
## 学习jquery
## jquery 源码查找&lt;/p&gt;

&lt;h1 id=&quot;ecmascript&quot;&gt;Ecmascript&lt;/h1&gt;

&lt;h2 id=&quot;understanding-ecmascript-6---nicholas-c-zakas&quot;&gt;Understanding ECMAScript 6 - Nicholas C. Zakas&lt;/h2&gt;
&lt;p&gt;## exploring-es6
## exploring-es6翻译
## exploring-es6翻译后预览
## 阮一峰 es6
## 阮一峰 Javascript
## ECMA-262，第 5 版
## es5&lt;/p&gt;

&lt;h1 id=&quot;js-template&quot;&gt;Js template&lt;/h1&gt;

&lt;h2 id=&quot;template-chooser&quot;&gt;template-chooser&lt;/h2&gt;
&lt;p&gt;## artTemplate
## tomdjs
## 淘宝模板juicer模板
## Fxtpl v1.0 繁星前端模板引擎
## laytpl
## mozilla - nunjucks
## Juicer
## dustjs
## etpl&lt;/p&gt;

&lt;h1 id=&quot;section-13&quot;&gt;弹出层&lt;/h1&gt;

&lt;h2 id=&quot;artdialog-&quot;&gt;artDialog 最新版&lt;/h2&gt;
&lt;p&gt;## artDialog 文档
## google code 下载地址
## 贤心弹出层
## 响应式用户交互组件库
## sweetalert-有css3动画弹出层&lt;/p&gt;

&lt;h1 id=&quot;css&quot;&gt;CSS&lt;/h1&gt;

&lt;h2 id=&quot;css-&quot;&gt;CSS 语法参考&lt;/h2&gt;
&lt;p&gt;## CSS3动画手册
## 腾讯css3动画制作工具
## 志爷css小工具集合
## css3 js 移动大杂烩
## bouncejs 触摸库
## css3 按钮动画
## animate.css
## 全局CSS的终结(狗带) [译]&lt;/p&gt;

&lt;h1 id=&quot;angularjs&quot;&gt;Angularjs&lt;/h1&gt;

&lt;h2 id=&quot;angularjs-&quot;&gt;Angular.js 的一些学习资源&lt;/h2&gt;
&lt;p&gt;## angularjs中文社区
## Angularjs源码学习
## Angularjs源码学习
## angular对bootstrap的封装
## angularjs + nodejs
## 吕大豹 Angularjs
## AngularJS 最佳实践
## Angular的一些扩展指令
## Angular数据绑定原理
## 一些扩展Angular UI组件
## Ember和AngularJS的性能测试
## 带你走近AngularJS - 基本功能介绍
## Angularjs开发指南
## Angularjs学习
## 不要带着jQuery的思维去学习AngularJS
## angularjs 学习笔记
## angularjs 开发指南
## angularjs 英文资料
## angular bootstrap
## angular jq mobile
## angular ui
## 整合jQuery Mobile+AngularJS经验谈
## 有jQuery背景，该如何用AngularJS编程思想
## AngularJS在线教程
## angular学习笔记&lt;/p&gt;

&lt;h1 id=&quot;react&quot;&gt;React&lt;/h1&gt;

&lt;h2 id=&quot;reactjs-&quot;&gt;react.js 中文论坛&lt;/h2&gt;
&lt;p&gt;## react.js 官方网址
## react.js 官方文档
## react.js material UI
## react.js TouchstoneJS UI
## react.js amazeui UI
## React 入门实例教程 - 阮一峰
## React Native 中文版
## Webpack 和 React 小书 - 前端乱炖
## Webpack 和 React 小书 - gitbook
## webpack
## Webpack，101入门体验
## webpack入门教程
## 基于webpack搭建前端工程解决方案探索
## React原创实战视频教程&lt;/p&gt;

&lt;h1 id=&quot;api-1&quot;&gt;移动端API&lt;/h1&gt;

&lt;h1 id=&quot;api-2&quot;&gt;API&lt;/h1&gt;

&lt;h2 id=&quot;section-14&quot;&gt;99移动端知识集合&lt;/h2&gt;
&lt;p&gt;## 移动端前端开发知识库
## 移动前端的一些坑和解决方法（外观表现）
## 【原】移动web资源整理
## zepto 1.0 中文手册
## zepto 1.0 中文手册
## zepto 1.1.2
## zepto 中文注释
## jqmobile 手册
## 移动浏览器开发集合
## 移动开发大杂烩
## 微信webview中的一些问题&lt;/p&gt;

&lt;h1 id=&quot;section-15&quot;&gt;框架&lt;/h1&gt;

&lt;h2 id=&quot;htmlios&quot;&gt;特色的HTML框架可以创建精美的iOS应用&lt;/h2&gt;
&lt;p&gt;## 淘宝SUI&lt;/p&gt;

&lt;h1 id=&quot;avalon&quot;&gt;avalon&lt;/h1&gt;

&lt;h2 id=&quot;avalonjs&quot;&gt;avalonjs&lt;/h2&gt;
&lt;p&gt;## Avalon新一代UI库： OniUI
## avalon.oniui-基于avalon的组件库&lt;/p&gt;

&lt;h1 id=&quot;requriejs&quot;&gt;Requriejs&lt;/h1&gt;

&lt;h2 id=&quot;javascript&quot;&gt;Javascript模块化编程（一）：模块的写法&lt;/h2&gt;
&lt;p&gt;## Javascript模块化编程（二）：AMD规范
## Javascript模块化编程（三）：require.js的用法
## RequireJS入门（一）
## RequireJS入门（二）
## RequireJS进阶（三）
## requrie源码学习
## requrie 入门指南
## requrieJS 学习笔记
## requriejs 其一
## require backbone结合&lt;/p&gt;

&lt;h1 id=&quot;seajs&quot;&gt;Seajs&lt;/h1&gt;

&lt;h2 id=&quot;seajs-1&quot;&gt;seajs&lt;/h2&gt;
&lt;p&gt;## seajs 中文手册&lt;/p&gt;

&lt;h1 id=&quot;lesssass&quot;&gt;Less,sass&lt;/h1&gt;

&lt;h2 id=&quot;sass&quot;&gt;sass&lt;/h2&gt;
&lt;p&gt;## sass教程-sass中国
## Sass 中文文档
## less&lt;/p&gt;

&lt;h1 id=&quot;markdown&quot;&gt;Markdown&lt;/h1&gt;

&lt;h2 id=&quot;markdown--&quot;&gt;Markdown 语法说明 (简体中文版)&lt;/h2&gt;
&lt;p&gt;## markdown入门参考
## gitbook 国外的在线markdown可编辑成书
## mdeditor 一款国内的在线markdown编辑器
## stackedit 国外的在线markdown编辑器，功能强大，同步云盘
## mditor 一款轻量级的markdown编辑器
## lepture-editor
## markdown-editor&lt;/p&gt;

&lt;h1 id=&quot;d3&quot;&gt;D3&lt;/h1&gt;

&lt;h2 id=&quot;d3-tutorials&quot;&gt;d3 Tutorials&lt;/h2&gt;
&lt;p&gt;## Gallery
## lofter
## iteye
## ruanyifeng&lt;/p&gt;

&lt;h1 id=&quot;section-16&quot;&gt;兼容性&lt;/h1&gt;

&lt;h2 id=&quot;esma-&quot;&gt;esma 兼容列表&lt;/h2&gt;
&lt;p&gt;## W3C CSS验证服务
## caniuse
## csscreator
## microsoft
## 在线测兼容-移动端
## emulators&lt;/p&gt;

&lt;h1 id=&quot;ui&quot;&gt;UI相关&lt;/h1&gt;

&lt;h2 id=&quot;bootcss&quot;&gt;bootcss&lt;/h2&gt;
&lt;p&gt;## MetroUICSS
## semantic
## Buttons
## kitecss
## pintuer
## amazeui
## worldhello
## linuxtoy
## gitmagic
## rogerdudler
## gitref
## book
## gogojimmy&lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP&lt;/h1&gt;

&lt;h2 id=&quot;http-api-&quot;&gt;HTTP API 设计指南&lt;/h2&gt;

&lt;h1 id=&quot;api-3&quot;&gt;其它API&lt;/h1&gt;

&lt;h2 id=&quot;javascript-1&quot;&gt;javascript流行库汇总&lt;/h2&gt;
&lt;p&gt;## 验证api
## underscore 中文手册
## underscore源码分析
## underscore源码分析-亚里士朱德的博客
## underscrejs en api
## lodash - underscore的代替品
## ext4api
## backbone 中文手册
## qwrap手册
## 缓动函数
## svg 中文参考
## svg mdn参考
## svg 导出 canvas
## svg 导出 png
## ai-to-svg
## localStorage 库&lt;/p&gt;

&lt;h1 id=&quot;section-17&quot;&gt;图表类&lt;/h1&gt;

&lt;h2 id=&quot;highcharts-api&quot;&gt;Highcharts 中文API&lt;/h2&gt;
&lt;p&gt;## Highcharts 英文API
## ECharts 百度的图表软件
## 高德地图
## 开源的矢量图脚本框架
## svg 地图&lt;/p&gt;

&lt;h1 id=&quot;vue&quot;&gt;vue&lt;/h1&gt;

&lt;h2 id=&quot;vue-1&quot;&gt;Vue&lt;/h2&gt;
&lt;p&gt;## Vue 论坛
## Vue 入门指南
## Vue 的一些资源索引&lt;/p&gt;

&lt;h1 id=&quot;section-18&quot;&gt;正则&lt;/h1&gt;

&lt;h2 id=&quot;js&quot;&gt;JS正则表达式元字符&lt;/h2&gt;
&lt;p&gt;## 正则表达式30分钟入门教程
## MDN-正则表达式
## ruanyifeng - RegExp对象
## 小胡子哥 - 进阶正则表达式
## is.js
## 正则在线测试&lt;/p&gt;

&lt;h1 id=&quot;ionic&quot;&gt;ionic&lt;/h1&gt;

&lt;h2 id=&quot;ionic-1&quot;&gt;ionic&lt;/h2&gt;

&lt;h1 id=&quot;section-19&quot;&gt;其它&lt;/h1&gt;

&lt;h2 id=&quot;mockjs-&quot;&gt;Mock.js 是一款模拟数据生成器&lt;/h2&gt;

&lt;h1 id=&quot;section-20&quot;&gt;开发规范&lt;/h1&gt;

&lt;h1 id=&quot;section-21&quot;&gt;前端&lt;/h1&gt;

&lt;h2 id=&quot;github&quot;&gt;通过分析github代码库总结出来的工程师代码书写习惯&lt;/h2&gt;
&lt;p&gt;## HTML&amp;amp;CSS编码规范 by @mdo
## 团队合作的css命名规范-腾讯AlloyTeam前端团队
## 前端编码规范之js - by yuwenhui
## 前端编码规范之js - by 李靖
## 前端开发规范手册
## Airbnb JavaScript 编码规范（简体中文版）
## AMD与CMD规范的区别
## AMD与CMD规范的区别
## KISSY 源码规范
## bt编码规范
## 规范加强版
## 前端代码规范 及 最佳实践
## 百度前端规范
## 百度前端规范
## 百度前端规范
## ECMAScript6 编码规范–广发证券前端团队
## JavaScript 风格指南/编码规范（Airbnb公司版）
## 网易前端开发规范
## css模块
## 前端规范资源列表&lt;/p&gt;

&lt;h1 id=&quot;php&quot;&gt;PHP&lt;/h1&gt;

&lt;h2 id=&quot;php-&quot;&gt;最流行的PHP 代码规范&lt;/h2&gt;
&lt;p&gt;## 最流行的PHP 代码规范&lt;/p&gt;

&lt;h1 id=&quot;android&quot;&gt;Android&lt;/h1&gt;

&lt;h2 id=&quot;android-1&quot;&gt;【敏捷开发】Android团队开发规范&lt;/h2&gt;
&lt;p&gt;## Android 开发规范与应用&lt;/p&gt;

&lt;h1 id=&quot;section-22&quot;&gt;各大公司开源项目&lt;/h1&gt;

&lt;h2 id=&quot;facebook-projects&quot;&gt;Facebook Projects&lt;/h2&gt;
&lt;p&gt;## 百度web前端研发部
## 百度EFE
## 百度github
## alloyteam
## alloyteam-github
## alloyteam-AlloyGameEngine
## AlloyDesigner 即时修改，即时保存，设计稿较正，其它开发辅助工具
## H5交互页编辑器AEditor介绍 H5动画交互页开发的工具介绍
## AEditor H5动画交互页开发的工具
## maka
## 值得订阅的weekly
## 腾讯html5
## 奇舞团开源项目
## Qunar UED&lt;/p&gt;

&lt;h1 id=&quot;javascript-2&quot;&gt;Javascript&lt;/h1&gt;

&lt;h1 id=&quot;section-23&quot;&gt;常用&lt;/h1&gt;

&lt;h2 id=&quot;iebetterjs-ie6-ie8ie9chrome&quot;&gt;ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性&lt;/h2&gt;
&lt;p&gt;## 模拟键盘
## 拼音
## 中国个人身份证号验证&lt;/p&gt;

&lt;h1 id=&quot;section-24&quot;&gt;算法&lt;/h1&gt;

&lt;h2 id=&quot;javascript--&quot;&gt;数据结构与算法 JavaScript 描述. 章节练习&lt;/h2&gt;
&lt;p&gt;## 常见排序算法（JS版）
## 经典排序
## 常见排序算法-js版本
## JavaScript 算法与数据结构 精华集
## 面试常考算法题精讲&lt;/p&gt;

&lt;h1 id=&quot;section-25&quot;&gt;移动端&lt;/h1&gt;

&lt;h2 id=&quot;fastclick&quot;&gt;fastclick&lt;/h2&gt;
&lt;p&gt;## no-click-delay&lt;/p&gt;

&lt;h1 id=&quot;json&quot;&gt;JSON&lt;/h1&gt;

&lt;h2 id=&quot;json-1&quot;&gt;模拟生成JSON数据&lt;/h2&gt;
&lt;p&gt;## 返回跨域JSONAPI&lt;/p&gt;

&lt;h1 id=&quot;html5&quot;&gt;Html5&lt;/h1&gt;

&lt;h2 id=&quot;html5--demo&quot;&gt;HTML5 有哪些让你惊艳的 demo？&lt;/h2&gt;

&lt;h1 id=&quot;css-1&quot;&gt;CSS&lt;/h1&gt;

&lt;h2 id=&quot;browserhacks&quot;&gt;browserhacks&lt;/h2&gt;

&lt;h1 id=&quot;jquery-1&quot;&gt;jQuery&lt;/h1&gt;

&lt;h1 id=&quot;section-26&quot;&gt;焦点图&lt;/h1&gt;

&lt;h2 id=&quot;myfocus&quot;&gt;myfocus&lt;/h2&gt;
&lt;p&gt;## myfocus-官方演示站
## SuperSlidev2.1 – 大话主席
## soChange&lt;/p&gt;

&lt;h1 id=&quot;ext-easyui-j-ui-ui&quot;&gt;Ext, EasyUI, J-UI 及其它各种UI方案&lt;/h1&gt;

&lt;h1 id=&quot;ext&quot;&gt;Ext&lt;/h1&gt;

&lt;h2 id=&quot;extjs&quot;&gt;extjs&lt;/h2&gt;
&lt;p&gt;## ext4英文api
## ext4中文api&lt;/p&gt;

&lt;h1 id=&quot;easyui&quot;&gt;EasyUI&lt;/h1&gt;

&lt;h2 id=&quot;jquery-easyui-&quot;&gt;jquery easyui 未压缩源代码&lt;/h2&gt;

&lt;h1 id=&quot;j-ui&quot;&gt;J-UI&lt;/h1&gt;

&lt;h2 id=&quot;j-ui-1&quot;&gt;J-UI&lt;/h2&gt;

&lt;h1 id=&quot;other&quot;&gt;Other&lt;/h1&gt;

&lt;h2 id=&quot;mui-app&quot;&gt;MUI-最接近原生APP体验的高性能前端框架&lt;/h2&gt;
&lt;p&gt;## Amaze UI | 中国首个开源 HTML5 跨屏前端框架
## 淘宝 HTML5 前端框架
## KISSY - 阿里前端JavaScript库
## 网易Nej - Nice Easy Javascript
## Kendo UI MVVM Demo
## Bootstrap
## Smart UI
## 雅虎UI - CSS UI&lt;/p&gt;

&lt;h1 id=&quot;section-27&quot;&gt;页面 社会化 分享功能&lt;/h1&gt;

&lt;h2 id=&quot;pc&quot;&gt;百度分享 pc端&lt;/h2&gt;
&lt;p&gt;## JiaThis pc端
## 社会化分享组件 移动端
## ShareSDK 轻松实现社会化功能 移动端
## 友盟分享 移动端&lt;/p&gt;

&lt;h1 id=&quot;section-28&quot;&gt;富文本编辑器&lt;/h1&gt;

&lt;h2 id=&quot;ueditor&quot;&gt;百度 ueditor&lt;/h2&gt;
&lt;p&gt;## 经典的ckeditor
## 经典的kindeditor
## wysiwyg
## 一个有情怀的编辑器。Bach’s Editor
## tower用的编辑器
## summernote 编辑器
## html5编辑器
## XEditor
## wangEditor&lt;/p&gt;

&lt;h1 id=&quot;section-29&quot;&gt;日历&lt;/h1&gt;

&lt;h1 id=&quot;pc-1&quot;&gt;PC&lt;/h1&gt;

&lt;h2 id=&quot;my97&quot;&gt;经典my97&lt;/h2&gt;
&lt;p&gt;## 强大的独立日期选择器
## fullcalendar
## fullcalendar日历控件知识点集合
## 中文api
## 农历日历
## 超酷的仿百度带节日日历老黄历控件
## 日期格式化
## 大牛日历控件
## 我群某管理作品
## input按位替换-官网
## input按位替换-github
## bootstrap-daterangepicker
## 国外30个插件集合
## JavaScript datepicker
## Datepair.js
## 一个风格多样的日历
## 弹出层式的全日历
## jquery双日历&lt;/p&gt;

&lt;h1 id=&quot;section-30&quot;&gt;移动&lt;/h1&gt;

&lt;h2 id=&quot;jquery-2&quot;&gt;大气实用jQuery手机移动端日历日期选择插件&lt;/h2&gt;
&lt;p&gt;## jQuery Mobile 移动开发中的日期插件Mobiscroll&lt;/p&gt;

&lt;h1 id=&quot;date-library&quot;&gt;Date library&lt;/h1&gt;

&lt;h2 id=&quot;datejs&quot;&gt;Datejs&lt;/h2&gt;
&lt;p&gt;## sugarjs&lt;/p&gt;

&lt;h1 id=&quot;section-31&quot;&gt;综合效果搜索平台&lt;/h1&gt;

&lt;h2 id=&quot;section-32&quot;&gt;效果网&lt;/h2&gt;
&lt;p&gt;## 17素材
## 常用的JavaScript代码片段&lt;/p&gt;

&lt;h1 id=&quot;section-33&quot;&gt;前端工程化&lt;/h1&gt;

&lt;h1 id=&quot;section-34&quot;&gt;概述&lt;/h1&gt;

&lt;h2 id=&quot;section-35&quot;&gt;前端工具大全&lt;/h2&gt;
&lt;p&gt;## 什么是前端工程化&lt;/p&gt;

&lt;h1 id=&quot;gulp&quot;&gt;Gulp&lt;/h1&gt;

&lt;h2 id=&quot;gulp-1&quot;&gt;Gulp官网&lt;/h2&gt;
&lt;p&gt;## Gulp中文网
## gulp资料收集
## Gulp：任务自动管理工具 - ruanyifeng
## Gulp插件
## Gulp不完全入门教程
## 为什么使用gulp?
## Gulp安装及配合组件构建前端开发一体化
## Gulp 入门指南
## Gulp 入门指南 - nimojs
## Gulp入门教程
## Gulp in Action
## Gulp开发教程（翻译）
## 前端构建工具gulpjs的使用介绍及技巧&lt;/p&gt;

&lt;h1 id=&quot;grunt&quot;&gt;Grunt&lt;/h1&gt;

&lt;h2 id=&quot;gruntjs&quot;&gt;gruntjs&lt;/h2&gt;
&lt;p&gt;## Grunt中文网&lt;/p&gt;

&lt;h1 id=&quot;fis&quot;&gt;Fis&lt;/h1&gt;

&lt;h2 id=&quot;fis-&quot;&gt;fis 官网&lt;/h2&gt;
&lt;p&gt;## fis&lt;/p&gt;

&lt;h1 id=&quot;section-36&quot;&gt;轮播图&lt;/h1&gt;

&lt;h1 id=&quot;pc-2&quot;&gt;pc图轮&lt;/h1&gt;

&lt;h2 id=&quot;sochange&quot;&gt;单屏轮播sochange&lt;/h2&gt;
&lt;p&gt;## 左右按钮多图切换
## fullpage全屏轮播&lt;/p&gt;

&lt;h1 id=&quot;section-37&quot;&gt;移动端&lt;/h1&gt;

&lt;h2 id=&quot;section-38&quot;&gt;无缝切换&lt;/h2&gt;
&lt;p&gt;## 滑屏效果
## 全屏fullpage
## 单个图片切换
## 单个全屏切换
## 百度的切换库
## 单个全屏切换
## 滑屏效果
## 旋转拖动设置
## 类似于swipe切换
## 支持多种形式的触摸滑动
## 滑屏效果
## 大话主席pc移动图片轮换
## 滑屏效果
## 基于zepto的fullpage
## [WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应
## 判断微信客户端的那些坑
## 可以通过javascript直接调用原生分享的工具
## JiaThis 分享到微信代码
## 聊聊移动端跨平台开发的各种技术
## 前端自动化测试
## 多种轮换图片
## 滑动侧边栏&lt;/p&gt;

&lt;h1 id=&quot;section-39&quot;&gt;文件上传&lt;/h1&gt;

&lt;h2 id=&quot;section-40&quot;&gt;百度上传组件&lt;/h2&gt;
&lt;p&gt;## 上传
## flash 头像上传
## 图片上传预览
## 图片裁剪
## 图片裁剪-shearphoto
## jQuery图片处理&lt;/p&gt;

&lt;h1 id=&quot;select&quot;&gt;模拟select&lt;/h1&gt;

&lt;h2 id=&quot;select-1&quot;&gt;糖饼 select&lt;/h2&gt;
&lt;p&gt;## flexselect
## 双select
## select2&lt;/p&gt;

&lt;h1 id=&quot;section-41&quot;&gt;取色插件&lt;/h1&gt;

&lt;h2 id=&quot;photoshop-&quot;&gt;类似 Photoshop 的界面取色插件&lt;/h2&gt;
&lt;p&gt;## jquery color
## 取色插件集合
## farbtastic 圆环＋正方形&lt;/p&gt;

&lt;h1 id=&quot;section-42&quot;&gt;城市联动&lt;/h1&gt;

&lt;h2 id=&quot;jquerycityselectjsjqueryjson&quot;&gt;jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果&lt;/h2&gt;

&lt;h1 id=&quot;section-43&quot;&gt;剪贴板&lt;/h1&gt;

&lt;h2 id=&quot;section-44&quot;&gt;剪贴板&lt;/h2&gt;
&lt;p&gt;## clipboard 最新的剪切方案
## 不是Flash的剪贴板&lt;/p&gt;

&lt;h1 id=&quot;section-45&quot;&gt;简繁转换&lt;/h1&gt;

&lt;h2 id=&quot;section-46&quot;&gt;简繁转换&lt;/h2&gt;

&lt;h1 id=&quot;grid&quot;&gt;表格 Grid&lt;/h1&gt;

&lt;h2 id=&quot;facebook&quot;&gt;facebook表格&lt;/h2&gt;
&lt;p&gt;## 类似于Excel编辑表格-handsontable
## bootstrap-table插件
## datatables&lt;/p&gt;

&lt;h1 id=&quot;section-47&quot;&gt;在线演示&lt;/h1&gt;

&lt;h2 id=&quot;js----runjs&quot;&gt;js 在线编辑 - runjs&lt;/h2&gt;
&lt;p&gt;## js 在线编辑 - jsbin
## js 在线编辑 - codepen
## js 在线编辑 - jsfiddle
## java 在线编辑 - runjs
## js 在线编辑 - hcharts
## js 在线编辑 - jsdm
## sql 在线编辑 - sqlfiddle
## mozilla 在线编辑器&lt;/p&gt;

&lt;h1 id=&quot;section-48&quot;&gt;播放器&lt;/h1&gt;

&lt;h2 id=&quot;html5-videoplayer&quot;&gt;Html5 VideoPlayer&lt;/h2&gt;

&lt;h1 id=&quot;section-49&quot;&gt;粒子动画&lt;/h1&gt;

&lt;h2 id=&quot;proton-&quot;&gt;Proton 烟花&lt;/h2&gt;

&lt;h1 id=&quot;nodejs&quot;&gt;Nodejs&lt;/h1&gt;

&lt;h2 id=&quot;nodejs-&quot;&gt;nodejs 篇幅比较巨大&lt;/h2&gt;
&lt;p&gt;## Node.js 包教不包会
## 篇幅比较少
## node express 入门教程
## nodejs定时任务
## 一个nodejs博客
## 【NodeJS 学习笔记04】新闻发布系统
## 过年7天乐，学nodejs 也快乐
## 七天学会NodeJS
## Nodejs学习笔记（二）— 事件模块
## nodejs入门
## angularjs nodejs
## 从零开始nodejs系列文章
## 理解nodejs
## nodejs事件轮询
## node入门
## nodejs cms
## Node初学者入门，一本全面的NodeJS教程
## NodeJS的代码调试和性能调优&lt;/p&gt;

&lt;h1 id=&quot;section-50&quot;&gt;性能优化&lt;/h1&gt;

&lt;h1 id=&quot;section-51&quot;&gt;常规优化&lt;/h1&gt;

&lt;h2 id=&quot;javascript-3&quot;&gt;Javascript高性能动画与页面渲染&lt;/h2&gt;
&lt;p&gt;## 移动H5前端性能优化指南
## 5173首页前端性能优化实践
## 给网页设计师和前端开发者看的前端性能优化
## 复杂应用的 CSS 性能分析和优化建议
## 张鑫旭——前端性能
## 前端性能监控总结
## 网站性能优化之CSS无图片技术
## web前端性能优化进阶路
## 前端技术：网站性能优化之CSS无图片技术
## 浏览器的加载与页面性能优化
## 页面加载中的图片性能优化
## Hey——前端性能
## html优化
## 99css——性能
## Yslow——性能优化
## YSLOW中文介绍
## 转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化
## Yahoo!团队实践分享：网站性能
## 网站性能优化指南：什么使我们的网站变慢？
## 网站性能优化实践，减少加载时间，提高用户体验
## 浅谈网站性能优化 前端篇
## 前端重构实践之如何对网站性能优化？
## 前端性能优化：使用媒体查询加载指定大小的背景图片
## 网站性能系列博文
## 加载，不只是少一点点
## 前端性能的测试与优化
## 分享网页加载速度优化的一些技巧？
## 页面加载中的图片性能优化
## web前端优化(基于Yslow)
## 网站性能优化工具大全
## 【高性能前端1】高性能HTML
## 【高性能前端2】高性能CSS
## 由12306谈谈网站前端性能和后端性能优化
## AlloyTeam——前端优化
## 毫秒必争，前端网页性能最佳实践
## 网站性能工具Yslow的使用方法
## 前端工程与性能优化（上）：静态资源版本更新与缓存
## 前端工程与性能优化（下）：静态资源管理与模板框架
## HTTPS连接的前几毫秒发生了什么
## Yslow
## Essential Web Performance Metrics — A Primer, Part 1
## Essential Web Performance Metrics — Part 2
## YUISlide,针对移动设备的动画性能优化
## Improving Site Performance
## 让网站提速的最佳前端实践
## Why Website Speed is Important
## Need for Speed – How to Improve your Website Performance
## 阿里无线前端性能优化指南 (Pt.1 加载期优化)&lt;/p&gt;

&lt;h1 id=&quot;section-52&quot;&gt;优化工具&lt;/h1&gt;

&lt;h2 id=&quot;javascript--oneprofile&quot;&gt;JavaScript 性能分析新工具 OneProfile&lt;/h2&gt;
&lt;p&gt;## JavaScript 堆内存分析新工具 OneHeap&lt;/p&gt;

&lt;h1 id=&quot;section-53&quot;&gt;在线工具&lt;/h1&gt;

&lt;h2 id=&quot;google&quot;&gt;google在线工具&lt;/h2&gt;
&lt;p&gt;## 阿里测
## 阿里-免费测试服务
## 阿里-F2etest多浏览器兼容性测试解决方案
## js性能测试&lt;/p&gt;

&lt;h1 id=&quot;section-54&quot;&gt;前端架构&lt;/h1&gt;

&lt;h2 id=&quot;section-55&quot;&gt;技术架构&lt;/h2&gt;
&lt;p&gt;## 前端架构
## 如何成为前端架构师
## 关于前端架构-张克军
## 百度腾讯offer比较（腾讯游戏VS百度基础架构）&lt;/p&gt;

&lt;h1 id=&quot;section-56&quot;&gt;个人作品&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;推荐作品&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;winter代码片段需要翻墙
fgm
岑安作品集
当耐特demo集合
米空格 js作品
myFocus
SeaJS组件库
颜海镜作品
脚儿网作品
javascript个人作品
妙味的雷东升游戏作品
javascript作品集
云五笔，灰度产生生成工具
项目主页
个性的作品主页
播放器
ucren js demos 集
智能社
实例陈列架
zoye demo
王员外
平凡
jyg 游戏案例
很多jquery插件
不羁虫 - soJs 作品系列
frozenui
黑白棋
fromone
2. 群员作品&lt;/p&gt;

&lt;p&gt;MDialog - [合肥-M.J]
轮播图 - [上海－冷静]
[广州—坚壳]
[成都 - 无痕]　感恩节专题
[球霸天]
[北京-小数]
[ptf] Magix 工具
[杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用
[上海-剧中人]-实验室
[上海-豪情 ] 作品集合
[成都-feeling]
[上海-angela]
[海南-hank]作品
[上海-张力]博客
[上海-zenki]作品
移动端图案解锁
[合肥-M.J] - MPreview 移动端图片预览组
[合肥-M.J] - Mexam 移动端在线做题组
[北京-苏瑞] - dancer小人
[上海-玄沐]- 个人网站
[厦门-二哲]- 个人博客
3. 国外大牛精品&lt;/p&gt;

&lt;p&gt;pazguille
十三. 简历模板&lt;/p&gt;

&lt;p&gt;不错的个人简历
简历
张伦
简历
翁天信
动画方式的简历
组件丰富简历
简历池
haorooms博客
Justin Young
十四. 面试题&lt;/p&gt;

&lt;p&gt;那几个月在找工作（百度，网易游戏）
2014最新面试题
阿里前端面试题
2016校招内推 – 阿里巴巴前端 – 三面面试经历
腾讯面试题
年后跳槽那点事：乐视+金山+360面试之行
阿里前端面试题上线
拉勾网js面试题
前端面试
Web开发笔试面试题 大全
前端开发面试题
2014最新前端面试题
百度面试
面试题
前端工作面试问题
前端开发面试题
5个经典的前端面试问题
最全前端面试问题及答案总结
如何面试一名前端开发工程师？
史上最全 前端开发面试问题及答案整理
前端实习生面试总结
史上最全 前端开发面试问题及答案整理
BAT及各大互联网公司2014前端笔试面试题：JavaScript篇
前端开发面试题大收集
收集的前端面试题和答案
如何面试前端工程师
前端开发面试题
牛客网-笔试面经
十五. iconfont&lt;/p&gt;

&lt;p&gt;中文字体
淘宝字库
字体
制作教程
zhangxinxu-icommon
icommon
用字体在网页中画ICON图标(推荐教程)
字体压缩工具 感谢初级群　[深圳-小鱼] 的推荐
十六. 开发工具类&lt;/p&gt;

&lt;p&gt;前端开发工具&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA 简体中文专题教程
Webstorm,InterllIdea,Phpstorm
SublimeText
Atom
visual studio code
Chrome, Firebug, Filddle 调试&lt;/p&gt;

&lt;p&gt;Fiddler&lt;/p&gt;

&lt;p&gt;Fiddler调式使用知多少(一)深入研究
微信fiddle
微信fiddle
Chrome&lt;/p&gt;

&lt;p&gt;Google Chrome 官方
Chrome - 基础
Chrome - 进阶
Chrome - 性能
Chrome - 性能进阶
Chrome - 移动
Chrome - 使用技巧
Chrome - Console控制台不完全指南
Chrome - Workspace使浏览器变成IDE
network面板
chrome开发工具快捷键
chrome调试工具常用功能整理
Chrome 开发工具 Workspace 使用
Chrome神器Vimium快捷键学习记录
sass调试-w3cplus
如何更专业的使用Chrome开发者工具-w3cplus
chrome调试canvas
chrome profiles1
chrome profiles2
chrome profiles3
chrome移动版调试
chrome调试
chrome的调试
chrome console 命令详解
查看事件绑定1
查看事件绑定2
神器——Chrome开发者工具(一)
奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)
chrome 开发者工具的 15 个小技巧
Chrome开发者工具不完全指南
Chrome 开发者工具使用技巧
Firebug&lt;/p&gt;

&lt;p&gt;firebug视频教程
firefox 模拟器
console.log 命令详解
Firebug入门指南
Firebug控制台详解
移动,微信调试&lt;/p&gt;

&lt;p&gt;浏览器端调试安卓
移动端前端开发调试
使用 Chrome 远程调试 Android 设备
mac移动端调试
mac移动端调试
无线调试攻略
无线调试攻略
屌爆了,完美调试 微信webview(x5)
微信调试的那些事
远程console
微信调试工具
各种真机远程调试方法汇总
iOS Simulator&lt;/p&gt;

&lt;p&gt;Simulator
Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得
img&lt;/p&gt;

&lt;p&gt;loading img
智图-图片优化平台
在线png优化
生成二维码&lt;/p&gt;

&lt;p&gt;生成二维码
浏览器同步&lt;/p&gt;

&lt;p&gt;puer
liveReload
f5
File Watchers
在线PPT制作&lt;/p&gt;

&lt;p&gt;nodePPT
PPT
reveal
slippy
十七. 前端导航网站&lt;/p&gt;

&lt;p&gt;界面清爽的前端导航
前端导航
前端网址导航
前端名录
前端导航
前端开发资源
网址导航
前端开发仓库 - 众多效果的收集地
前端资源导航
F2E 前端导航
十八. 常用CDN&lt;/p&gt;

&lt;p&gt;新浪CDN
百度静态资源公共库
360网站卫士常用前端公共库CDN服务
Bootstrap中文网开源项目免费 CDN 服务
开放静态文件 CDN - 七牛
CDN加速 - jq22
jQuery CDN
Google jQuery CDN
微软CDN
十九. Git,SVN,Github&lt;/p&gt;

&lt;p&gt;Git&lt;/p&gt;

&lt;p&gt;git-scm
廖雪峰-Git教程
git-for-windows
GitHub 添加 SSH keys
gogithub
git常规命令练习
git的资料整理
我所记录的git命令（非常实用）
企业开发git工作流模式探索部分休整
GitHub 漫游指南
GitHub秘籍
使用git和github进行协同开发流程
动画方式练习git&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/04/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E5%A4%A7%E6%B1%87%E6%80%BB.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/04/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E5%A4%A7%E6%B1%87%E6%80%BB.html</guid>
        
        
      </item>
    
      <item>
        <title>前端性能优化</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;今天看了imooc的视频，对于前端性能优化的东西之前已经搞的挺多的了，但是现在还是有好多的东西，需要做！先在此整理一个简单的内容仅供共同学习。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section&quot;&gt;我们访问一个页面的时候都做了什么&lt;/h1&gt;
&lt;p&gt;## 介绍&lt;/p&gt;

&lt;h2 id=&quot;dnsip&quot;&gt;DNS寻址以及IP解析&lt;/h2&gt;
&lt;p&gt;## webserver背后做的事儿
## 前端页面渲染流程
## 浏览器的JS引擎
## 使用WebPageTest分析JD的网络性能(一)
## 使用WebPageTest分析JD的网络性能(二)&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;通用的不一定适合我们&lt;/h1&gt;
&lt;p&gt;## yahoo军规为什么不合适
## 技术优化出发点介绍
## 技术优化出发点－后端方法
## 技术优化出发点－加载方式&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;我们要到底优化什么&lt;/h1&gt;
&lt;p&gt;## bigpipe介绍
## bigpipe工作模式
## bigpipe的缺点
## 性能优化的术语回顾
## 总结&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/04/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/04/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</guid>
        
        
      </item>
    
      <item>
        <title>Npm工作流</title>
        <description>&lt;p&gt;npm install –cache-min 9999999&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;离线安装的解决方案&lt;/h2&gt;

&lt;h3 id=&quot;registry-&quot;&gt;Registry 代理。&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/npm-proxy-cache&quot;&gt;npm-proxy-cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nolanlawson/local-npm&quot;&gt;local-npm（用法）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mixu/npm_lazy&quot;&gt;npm-lazy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# npm-proxy-cache
$ npm --proxy http://localhost:8080 \
  --https-proxy http://localhost:8080 \
  --strict-ssl false \
  install

# local-npm
$ npm set registry http://127.0.0.1:5080

# npm-lazy
$ npm --registry http://localhost:8080/ install socket.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/04/NPM%E5%B7%A5%E4%BD%9C%E6%B5%81.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/04/NPM%E5%B7%A5%E4%BD%9C%E6%B5%81.html</guid>
        
        
      </item>
    
      <item>
        <title>Github Api</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;github的api，来收藏一下吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;github-api&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/H5ComponentBase.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/H5ComponentJsonObject.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    $.ajax({
        url: &#39;https://api.github.com/&#39;,
        type: &#39;get&#39;,
        success: function(res){

            var apiOject = new H5ComponentJsonObject(&#39;api&#39;, {
                type: &#39;githubapi&#39;,
                text: &#39;通过遍历所有的api对象，获取的内容如下（https://api.github.com/）：&#39;,
                data: res
            });

            $(&#39;#github-api&#39;).append(apiOject);
        }
    });
&lt;/script&gt;

&lt;h3 id=&quot;httpsdevelopergithubcomv3hypermedia&quot;&gt;https://developer.github.com/v3/#hypermedia&lt;/h3&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/04/Github-Api.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/04/Github-Api.html</guid>
        
        
      </item>
    
      <item>
        <title>Amd 和 cmd</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;关于AMD，CMD的问题，也算是一个基础的问题了。这里把一些相关内容整理一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;amd--cmd-&quot;&gt;AMD 和 CMD 的区别&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者：玉伯 
链接：https://www.zhihu.com/question/20351507/answer/14859415
来源：知乎&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot;&gt;AMD 规范在这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/242&quot;&gt;CMD 规范在这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。&lt;/p&gt;

&lt;p&gt;CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。&lt;/p&gt;

&lt;p&gt;类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。
还有不少⋯⋯&lt;/p&gt;

&lt;p&gt;这些规范的目的都是为了 JavaScript 的模块化开发，特别是在浏览器端的。
目前这些规范的实现都能达成浏览器端模块化开发的目的。&lt;/p&gt;

&lt;p&gt;区别：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // CMD
 define(function(require, exports, module) {
     var a = require(&#39;./a&#39;)
     a.doSomething()
     // 此处略去 100 行
     var b = require(&#39;./b&#39;) // 依赖可以就近书写
     b.doSomething()
     // ... 
 })

 // AMD 默认推荐的是
 define([&#39;./a&#39;, &#39;./b&#39;], function(a, b) { // 依赖必须一开始就写好
     a.doSomething()
     // 此处略去 100 行
     b.doSomething()
     ...
 }) 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还有一些细节差异，具体看这个规范的定义就好，就不多说了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;seajs--requirejs-httpswwwdoubancomnote283566440&quot;&gt;&lt;a href=&quot;https://www.douban.com/note/283566440/&quot;&gt;SeaJS 和 RequireJS 的差异&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/277&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;相同之处&lt;/h2&gt;

&lt;p&gt;RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;不同之处&lt;/h2&gt;

&lt;p&gt;两者的主要区别如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;定位有差异。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;遵循的规范不同。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;推广理念有差异。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对开发调试的支持有差异。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;插件机制不同。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有不少差异，涉及具体使用方式和源码实现，欢迎有兴趣者研究并发表看法。&lt;/p&gt;

&lt;p&gt;总之，如果说 RequireJS 是 Prototype 类库的话，则 Sea.js 致力于成为 jQuery 类库。&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/04/AMD-%E5%92%8C-CMD.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/04/AMD-%E5%92%8C-CMD.html</guid>
        
        
      </item>
    
      <item>
        <title>Seajs</title>
        <description>
</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/03/seajs.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/03/seajs.html</guid>
        
        
      </item>
    
      <item>
        <title>Git工作流</title>
        <description>&lt;h1 id=&quot;git-&quot;&gt;git 配置&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;下面是 git 的一些配置和操作，在 Linux 系统的终端和 windows 下的 Git Bash 中都可以运行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) 用户名和邮箱&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;nameuser&quot; # 用户名设置成了 ***
$ git config --global user.email &quot;email&quot; 2) generate ssh key

$ ssh-keygen -t rsa -C &quot;email&quot; 
# Creates a new ssh key using the provided email 3) 编辑器

$ git config --global core.editor vim # 如想进一步提升逼格就把 Vim 也啃了 4) alias 设置，操作变得更加简单

$ git config --global alias.br branch # git br 即 git branch
$ git config --global alias.ci commit
$ git config --global alias.co checkout
$ git config --global alias.st status 5) 换行符设置成 false

$ git config --global core.autocrlf false 6) 为了保险起见，设置成单分支提交

$ git config --global push.default simple 7) 查看配置信息

$ git config --list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;git--1&quot;&gt;git 操作&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;操作前请保证有足够的权限进行相关操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) clone 远程仓库，语法：git clone 远程仓库地址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone 项目地址 2) 从远程仓库检出分支，语法：git checkout -b 本地分支名 远程分支名

比如：将远程的 abc 分支检出到本地并切换到相应分支
$ git checkout -b abc origin/abc 3) 删除本地分支，语法：git branch -d 本地分支名

$ git branch -d abc 如果用上面那一句删除不成功的话，可以尝试使用：

$ git branch -D abc 4) 重命名本地分支，语法：git branch -m 原有分支名 新分支名

比如：将本地分支 abc 重命名为 xyz
$ git branch -m abc xyz 5) push 分支，方法是切换到相应本地分支，再执行 git push origin

比如：将本地分支 abc 推送到远程仓库的 origin/abc

$ git checkout abc # 切换到 abc 分支
$ git push origin 6) 查看修改，语法：

$ git status -s # 查看有哪些文件发生了修改
$ git diff # 查看具体修改
$ git diff 文件名 # 查看对应文件的具体修改
$ git diff 分支名 文件名 # 查看相对对应分支中的对应文件的具体修改 7) 查看日志，语法：

$ git log
$ git log -5 # 查看最近的 5 条日志
$ git log -5 --graph # 以图的形式查看最近 5 条日志 8) 代码回滚，语法：

$ git log # 查看一下日志
$ git reset --hard 对应的标识值 9) 还原指定文件，语法：

$ git checkout 文件名 10) 拉取远程版本库更新

$ git fetch origin # 将远程仓库更新取回本地
$ git pull origin # 将远程仓库更新取回本地并合并
$ git pull origin master  效果等同于

$ git fetch origin master
$ git merge origin/master 11) git add 撤销

$ git reset head
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://github.com/BETH-zhang/2016/07/03/GIT%E5%B7%A5%E4%BD%9C%E6%B5%81.html</link>
        <guid isPermaLink="true">https://github.com/BETH-zhang/2016/07/03/GIT%E5%B7%A5%E4%BD%9C%E6%B5%81.html</guid>
        
        
      </item>
    
  </channel>
</rss>
